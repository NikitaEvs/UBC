package robotics.hutu.joycontrol;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTROLLERS".
*/
public class ControllerDao extends AbstractDao<Controller, Long> {

    public static final String TABLENAME = "CONTROLLERS";

    /**
     * Properties of entity Controller.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property ProfileID = new Property(1, long.class, "profileID", false, "PROFILE_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property TouchID = new Property(3, int.class, "touchID", false, "TOUCH_ID");
        public final static Property Id = new Property(4, String.class, "id", false, "ID");
        public final static Property CentreOX = new Property(5, float.class, "centreOX", false, "CENTRE_OX");
        public final static Property CentreOY = new Property(6, float.class, "centreOY", false, "CENTRE_OY");
        public final static Property NewOX = new Property(7, float.class, "newOX", false, "NEW_OX");
        public final static Property NewOY = new Property(8, float.class, "newOY", false, "NEW_OY");
        public final static Property Radius = new Property(9, float.class, "radius", false, "RADIUS");
        public final static Property OnTouch = new Property(10, boolean.class, "onTouch", false, "ON_TOUCH");
    }

    private DaoSession daoSession;

    private Query<Controller> profile_ControllersQuery;

    public ControllerDao(DaoConfig config) {
        super(config);
    }
    
    public ControllerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTROLLERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"PROFILE_ID\" INTEGER NOT NULL ," + // 1: profileID
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"TOUCH_ID\" INTEGER NOT NULL ," + // 3: touchID
                "\"ID\" TEXT NOT NULL ," + // 4: id
                "\"CENTRE_OX\" REAL NOT NULL ," + // 5: centreOX
                "\"CENTRE_OY\" REAL NOT NULL ," + // 6: centreOY
                "\"NEW_OX\" REAL NOT NULL ," + // 7: newOX
                "\"NEW_OY\" REAL NOT NULL ," + // 8: newOY
                "\"RADIUS\" REAL NOT NULL ," + // 9: radius
                "\"ON_TOUCH\" INTEGER NOT NULL );"); // 10: onTouch
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTROLLERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Controller entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getProfileID());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getTouchID());
        stmt.bindString(5, entity.getId());
        stmt.bindDouble(6, entity.getCentreOX());
        stmt.bindDouble(7, entity.getCentreOY());
        stmt.bindDouble(8, entity.getNewOX());
        stmt.bindDouble(9, entity.getNewOY());
        stmt.bindDouble(10, entity.getRadius());
        stmt.bindLong(11, entity.getOnTouch() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Controller entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getProfileID());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getTouchID());
        stmt.bindString(5, entity.getId());
        stmt.bindDouble(6, entity.getCentreOX());
        stmt.bindDouble(7, entity.getCentreOY());
        stmt.bindDouble(8, entity.getNewOX());
        stmt.bindDouble(9, entity.getNewOY());
        stmt.bindDouble(10, entity.getRadius());
        stmt.bindLong(11, entity.getOnTouch() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(Controller entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Controller readEntity(Cursor cursor, int offset) {
        Controller entity = new Controller( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getLong(offset + 1), // profileID
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // touchID
            cursor.getString(offset + 4), // id
            cursor.getFloat(offset + 5), // centreOX
            cursor.getFloat(offset + 6), // centreOY
            cursor.getFloat(offset + 7), // newOX
            cursor.getFloat(offset + 8), // newOY
            cursor.getFloat(offset + 9), // radius
            cursor.getShort(offset + 10) != 0 // onTouch
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Controller entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProfileID(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setTouchID(cursor.getInt(offset + 3));
        entity.setId(cursor.getString(offset + 4));
        entity.setCentreOX(cursor.getFloat(offset + 5));
        entity.setCentreOY(cursor.getFloat(offset + 6));
        entity.setNewOX(cursor.getFloat(offset + 7));
        entity.setNewOY(cursor.getFloat(offset + 8));
        entity.setRadius(cursor.getFloat(offset + 9));
        entity.setOnTouch(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Controller entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Controller entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Controller entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "controllers" to-many relationship of Profile. */
    public List<Controller> _queryProfile_Controllers(long profileID) {
        synchronized (this) {
            if (profile_ControllersQuery == null) {
                QueryBuilder<Controller> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProfileID.eq(null));
                profile_ControllersQuery = queryBuilder.build();
            }
        }
        Query<Controller> query = profile_ControllersQuery.forCurrentThread();
        query.setParameter(0, profileID);
        return query.list();
    }

}
